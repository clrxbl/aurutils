'\" t
.TH AUR 1 2016-12-25 AURUTILS
.SH NAME
aur \- helper tool for the arch user repository

.SH PROGRAMS
The below gives a short overview. See the respective documentation for
details.
.P
.BR aur\-graph (1)
.RS 4
Print package/dependency pairs.
.RE

.P
.BR aur\-build (1)
.RS 4
Build packages to a local repository.
.RE

.P
.BR aur\-chroot (1)
.RS 4
Build packages inside a chroot.
.RE

.P
.BR aur\-depends (1)
.RS 4
Order package dependencies using AurJson.
.RE

.P
.BR aur\-fetch (1)
.RS 4
Retrieve build files from the AUR.
.RE

.P
.BR aur\-pkglist (1)
.RS 4
Print the AUR package list.
.RE

.P
.BR aur\-repo\-filter (1)
.RS 4
Filter packages in the Arch Linux repositories.
.RE

.P
.BR aur\-search (1)
.RS 4
Search for AUR packages.
.RE

.P
.BR aur\-srcver (1)
.RS 4
Update and print package revisions.
.RE

.P
.BR aur\-sync (1)
.RS 4
Download and build AUR packages automatically
.RE

.P
.BR aur\-vercmp (1)
.RS 4
Check packages for AUR updates.
.RE

.SH EXIT STATUS
Programs follow a subset of errno(3), or preserve command status where
applicable.
.P
See also EXIT STATUS in wget(1).

.SH CREATING A LOCAL REPOSITORY 
Configure the local repository in a separate pacman configuration,
for example in \fI/etc/pacman.d/custom\fR:
.EX

  [options]
  CacheDir = /var/cache/pacman/pkg
  CacheDir = /var/cache/pacman/custom
  CleanMethod = KeepCurrent

  [custom]
  SigLevel = Optional TrustAll
  Server = file:///var/cache/pacman/custom

.EE
Avoid naming the repository \fIlocal\fR, as this name is reserved by
pacman.
.P
Include the configuration in \fI/etc/pacman.conf\fR:
.EX

  # An example of a custom package repository.  See the pacman manpage for
  # tips on creating your own repositories.
  Include = /etc/pacman.d/custom

.EE
Add \fBInclude\fR to the \fIend\fR of pacman.conf, where possible.
.P
Create the repository root and database:
.EX

  $ sudo install -d /var/cache/pacman/custom -o $USER
  $ repo-add /var/cache/pacman/custom/custom.db.tar

.EE
If packages are already available, add them to the database:
.EX

  $ cd /var/cache/pacman/custom
  $ repo-add -n custom.db.tar ./*.pkg.tar.xz

.EE
Synchronize pacman:
.EX

  $ sudo pacman -Syu

.EE
.SY Note:
It is recommended to use a pacman cache directory (\fBCacheDir\fR) as
the package pool. This avoids checksum mismatches between built
packages and any cached versions.
.YS

.SY Tip:
Consider separate repositories for different purposes, such as
version control packages.
.YS

.SH EXAMPLES
Examples below assume \fBbash\fR as the interactive shell.

Run actions on the dependency tree of an AUR package:
.EX

  $ echo foo | aur depends | while read -r pkg; do ... done

.EE
Build all packages in the \fIpkgbuilds\fR github repository: (requires
\fIpkgbuild-introspection\fR)
.EX

  $ git clone https://www.github.com/Earnestly/pkgbuilds
  $ cd pkgbuilds
  $ find -maxdepth 2 -name PKGBUILD -execdir mksrcinfo \\;
  $ aur graph */.SRCINFO | tsort | tac > queue # Remove unwanted targets
  $ aur build -d custom -a queue

.EE
Print packages from the \fIcustom\fR repository that are not available
in the AUR:
.EX

  $ grep -Fxvf <(aur pkglist) <(pacman -Slq custom)

.EE
As above, but for orphaned packages:
.EX

  $ pacman -Slq custom | aur rpc -t info | \\
       jq -r '.[].results[] | select(.Maintainer == null)'

.EE
Print Perl modules that are both in the AUR and official repositories:
.EX

  $ aur pkglist -P '^perl-.+' > perl.txt
  $ grep -Fxf <(aur repo-filter < perl.txt) perl.txt

.EE
Search for packages with both 'wm' and 'git' in the name:
.EX

  $ aur pkglist -P '(?=.*wm)(?=.*git)' | xargs aur search -i

.EE
Build \fIplasma-desktop-git\fR and its dependencies in an nspawn container:
.EX

  $ aur sync -c plasma-desktop-git

.EE
Update all AUR packages in a single local repository:
.EX

  $ aur sync -u

.EE
Update packages from the \fIcustom\fR repository that are installed on the host:
.EX

  $ grep -Fxf <(pacman -Qq) <(pacman -Slq custom) | aur sync --repo=custom -

.EE
Build a package for a different architecture, here \fIi686\fR:
.EX

  $ setarch i686 aur sync -c --repo=custom_i686 tclkit

.EE
Select a package matching \fIpony\fR and build the result:
.EX

  $ select a in $(aur pkglist -F pony); do aur sync "$a"; break; done

.EE
Print packages both in AUR and [community] and compare their versions:
.EX

  $ aur vercmp -d community -a

.EE
Check foreign packages for AUR updates:
.EX

  $ pacman -Qm | aur vercmp

.EE
Repository packages can be "made foreign" by temporarily removing the
repository from the pacman configuration. This can be used with programs
that only check foreign packages for AUR updates.

For example, create the following script in
\fI/usr/local/bin/mypacman\fR:
.EX

 #!/bin/sh
 pacman --config=/usr/share/devtools/pacman-extra.conf "$@"

.EE
This script can then be propagated through the \fBPACMAN\fR variable
for programs supporting it.

.SH AUTHORS
.MT https://github.com/AladW
Alad Wenter
.ME

.\" vim: set textwidth=72
